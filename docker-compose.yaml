version: '3.8'

x-common-variables: &common-variables
  PYTHONUNBUFFERED: 1
  REDIS_HOST: redis
  REDIS_PORT: 6379
  AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
  AWS_SECRET_KEY: ${AWS_SECRET_KEY}
  S3_BUCKET: ${S3_BUCKET}
  AWS_REGION: ${AWS_REGION}
  AWS_ENDPOINT_URL: http://localstack:4566

x-common-build: &common-build
  args:
    PYTHON_VERSION: 3.9
    BUILD_TYPE: cpu

services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      <<: *common-variables
      MONGO_URI: mongodb://root:example@mongo:27017
      SEARCH_SERVICE_HOST: http://search-service:5000
      TRAINING_SERVICE_HOST: http://training-service:5001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mongo
      - redis
      - search-service
      - training-service
    networks:
      - app-network

  search-service:
    build:
      <<: *common-build
      context: ./trainer
      dockerfile: Dockerfile.python
      args:
        PYTORCH_INDEX: ${PYTORCH_INDEX:-https://download.pytorch.org/whl/cpu}
    ports:
      - "5000:5000"
    environment:
      <<: *common-variables
      SERVICE_PORT: 5000
    command: ["python", "search_service.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
    networks:
      - app-network

  training-service:
    build:
      <<: *common-build
      context: ./trainer
      dockerfile: Dockerfile.python
      args:
        PYTORCH_INDEX: ${PYTORCH_INDEX:-https://download.pytorch.org/whl/cpu}
    ports:
      - "5001:5001"
    environment:
      <<: *common-variables
      SERVICE_PORT: 5001
      TRAINING_QUEUE: training_queue
      MODEL_PREFIX: model_status
    command: ["python", "training_service.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - AWS_DEFAULT_REGION=us-east-1
      - EDGE_PORT=4566
      - DEBUG=1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - ./localstack/init-s3.sh:/docker-entrypoint-initaws.d/init-s3.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

volumes:
  mongodb_data:
  redis_data:
  localstack_data:

networks:
  app-network: