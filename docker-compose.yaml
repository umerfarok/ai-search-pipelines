version: '2.3'

services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
       - "0.0.0.0:8080:8080"
    environment:
      PYTHONUNBUFFERED: 1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AWS_ACCESS_KEY: test
      AWS_SECRET_KEY: test
      S3_BUCKET: local-bucket
      AWS_REGION: us-east-1
      AWS_ENDPOINT_URL: http://localstack:4566
      MONGO_URI: mongodb://root:example@mongo:27017
      SEARCH_SERVICE_HOST: http://search-service:5001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mongo
      - redis
    networks:
      - app-network

  search-service:
    build:
      context: ./trainer
      dockerfile: Dockerfile.python
    environment:
      TRANSFORMERS_CACHE: /app/cache/transformers
      HF_HOME: /app/cache/huggingface
      TORCH_HOME: /app/cache/torch
      MODEL_STORAGE_DIR: /app/models
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AWS_ACCESS_KEY: test
      AWS_SECRET_KEY: test
      S3_BUCKET: local-bucket
      AWS_REGION: us-east-1
      AWS_ENDPOINT_URL: http://localstack:4566
      NLTK_DATA: /app/cache/nltk_data
      SQLITE_TMPDIR: /app/tmp
      PYTHONUNBUFFERED: 1
      CHROMA_CLIENT_AUTH_PROVIDER: chromadb.auth.basic.BasicAuthClientProvider
      CHROMA_CLIENT_AUTH_CREDENTIALS: admin:admin
      CHROMA_CLIENT_AUTH_TOKEN_HEADER: X-Chroma-Token
      IS_PERSISTENT: "TRUE"
    command: ["python3", "search_service.py"]
    volumes:
      - ./cache:/app/cache:rw
      - ./models:/app/models:rw
      - ./cache/nltk_data:/app/cache/nltk_data:rw  
      - ./tmp:/app/tmp:rw
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    runtime: nvidia
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network

  ml-base:
    build:
      context: ./trainer
      dockerfile: Dockerfile.base
    image: ml-base:latest

  training-service:
    build:
      context: ./trainer
      dockerfile: Dockerfile.python
    environment:
      TRANSFORMERS_CACHE: /app/cache/transformers
      HF_HOME: /app/cache/huggingface
      TORCH_HOME: /app/cache/torch
      MODEL_STORAGE_DIR: /app/models
      VECTOR_DB_HOST: chromadb
      VECTOR_DB_PORT: 8000
      TRAINING_QUEUE: training_queue
      MODEL_PREFIX: model_status
      AWS_ACCESS_KEY: test
      AWS_SECRET_KEY: test
      S3_BUCKET: local-bucket
      AWS_REGION: us-east-1
      AWS_ENDPOINT_URL: http://localstack:4566
      SQLITE_TMPDIR: /app/tmp
      CHROMA_CLIENT_AUTH_PROVIDER: chromadb.auth.basic.BasicAuthClientProvider
      CHROMA_CLIENT_AUTH_CREDENTIALS: admin:admin
      CHROMA_CLIENT_AUTH_TOKEN_HEADER: X-Chroma-Token
      IS_PERSISTENT: "TRUE"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
    ports:
      - "5000:5000"
    command: ["python3", "training_service.py"] 
    volumes:
      - ./cache:/app/cache:rw
      - ./models:/app/models:rw
      - ./tmp:/app/tmp:rw
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    runtime: nvidia
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
 
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - AWS_DEFAULT_REGION=us-east-1
      - EDGE_PORT=4566
      - DEBUG=1
      - PERSISTENCE=1
      - DATA_DIR=/var/lib/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LEGACY_DIRECTORIES=1
      - DISABLE_CORS_CHECKS=1
      - LOCALSTACK_VOLUME_DIR=/var/lib/localstack
      - FORCE_NONINTERACTIVE=1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./localstack/data:/var/lib/localstack/data"
      - "./localstack/init-s3.sh:/docker-entrypoint-initaws.d/init-s3.sh"
      - "./cache/s3:/var/lib/localstack/s3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network


  qdrant:
    image: qdrant/qdrant:v1.7.4
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - app-network

  frontend:
    build:
      context: ./playground
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8080
    depends_on:
      - api
    networks:
      - app-network
    profiles:
      - dev

networks:
  app-network:
    driver: bridge

volumes:
  qdrant_data:
  mongodb_data:
  redis_data:
  index_data:
    driver: local
