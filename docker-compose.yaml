version: '3.8'

services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - MONGO_URI=mongodb://root:example@mongo:27017
      - SEARCH_SERVICE_HOST=http://search-service:5000
      - TRAINING_SERVICE_HOST=http://training-service:5001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - data:/app/data:rw
      - models:/app/models:rw
    depends_on:
      - mongo
      - redis
      - search-service
      - training-service

  search-service:
    build:
      context: ./trainer
      dockerfile: Dockerfile.python
      args:
        BUILD_TYPE: cpu
    ports:
      - "5000:5000"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVICE_PORT=5000
      - BATCH_SIZE=32
    volumes:
      - data:/app/data:rw
      - models:/app/models:rw
    depends_on:
      - redis
    command: ["python", "search_service.py"]

  training-service:
    build:
      context: ./trainer
      dockerfile: Dockerfile.python
      args:
        BUILD_TYPE: cpu
    ports:
      - "5001:5001"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVICE_PORT=5001
      - TRAINING_QUEUE=training_queue
      - MODEL_PREFIX=model_status
    volumes:
      - data:/app/data:rw
      - models:/app/models:rw
    depends_on:
      - redis
    command: ["python", "training_service.py"]

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data/db

volumes:
  mongodb_data:
  data:
  models:
  redis_data: